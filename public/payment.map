{"version":3,"sources":["stripeTokenHandler.ts","index.ts"],"names":[],"mappings":";AAiBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAfA,MAAM,EAAsB,IAEpB,MAAA,EAAO,SAAS,eAAe,gBAC/B,EAAc,SAAS,cAAc,SAE3C,EAAY,aAAa,OAAQ,UACjC,EAAY,aAAa,OAAQ,eACjC,EAAY,aAAa,QAAS,EAAM,IAExC,EAAK,YAAY,GAGjB,EAAK,UAGP,QAAA,QAAe;;ACsBf,aAAA,IAAA,EAAA,KAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IArCA,MAAA,EAAA,EAAA,QAAA,yBAGM,EAAQ,CACZ,KAAM,CAEJ,SAAU,OACV,MAAO,YAKL,EAAS,OAAO,oCAChB,EAAW,EAAO,WAGlB,EAAO,EAAS,OAAO,OAAQ,CAAE,MAAA,IAGvC,EAAK,MAAM,iBAGX,QAAQ,IAAI,GAEZ,EAAK,GAAG,SAAU,IACV,MAAA,EAAe,SAAS,eAAe,eAEzC,EAAM,MACR,EAAa,YAAc,EAAM,MAAM,QAEvC,EAAa,YAAc,KAK/B,MAAM,EAAO,SAAS,eAAe,gBAErC,EAAK,iBAAiB,SAAgB,GAAQ,EAAA,OAAA,OAAA,EAAA,YAC5C,EAAM,iBAEA,MAAA,QAAe,EAAO,YAAY,GAEpC,GAAA,EAAO,MAAO,CAEK,SAAS,eAAe,eAEhC,YAAc,EAAO,MAAM,aAGxC,EAAA,QAAmB,EAAO","file":"payment.map","sourceRoot":"../client/payment","sourcesContent":["// tslint:disable-next-line:no-reference\n/// <reference path=\"../../node_modules/@types/stripe-v3/index.d.ts\"/>\nconst stripeTokenHandler = (token: stripe.Token) => {\n  // Insert the token ID into the form so it gets submitted to the server\n  const form = document.getElementById('payment-form') as HTMLFormElement;\n  const hiddenInput = document.createElement('input');\n\n  hiddenInput.setAttribute('type', 'hidden');\n  hiddenInput.setAttribute('name', 'stripeToken');\n  hiddenInput.setAttribute('value', token.id);\n\n  form.appendChild(hiddenInput);\n\n  // Submit the form\n  form.submit();\n};\n\nexport default stripeTokenHandler;\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../../node_modules/@types/stripe-v3/index.d.ts\"/>\nimport stripeTokenHandler from './stripeTokenHandler';\n\n// Custom styling can be passed to options when creating an Element.\nconst style = {\n  base: {\n    // Add your base input styles here. For example:\n    fontSize: '16px',\n    color: '#212529'\n  }\n};\n\n// FIXME: this is the test API key\nconst stripe = Stripe('pk_test_4KyBr6yn4LqYkHn9jfrJ074D');\nconst elements = stripe.elements();\n\n// Create an instance of the card Element.\nconst card = elements.create('card', { style });\n\n// Add an instance of the card Element into the `card-element` <div>.\ncard.mount('#card-element');\n\n// tslint:disable-next-line:no-console\nconsole.log(card);\n\ncard.on('change', event => {\n  const displayError = document.getElementById('card-errors');\n\n  if (event.error) {\n    displayError.textContent = event.error.message;\n  } else {\n    displayError.textContent = '';\n  }\n});\n\n// Create a token or display an error when the form is submitted.\nconst form = document.getElementById('payment-form');\n\nform.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  const result = await stripe.createToken(card);\n\n  if (result.error) {\n    // Inform the customer that there was an error.\n    const errorElement = document.getElementById('card-errors');\n\n    errorElement.textContent = result.error.message;\n  } else {\n    // Send the token to your server.\n    stripeTokenHandler(result.token);\n  }\n});\n"]}